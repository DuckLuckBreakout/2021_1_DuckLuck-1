name: Build and deploy

env:
  API_DB_TAG: v1.7
  API_SERVER_TAG: v1.7
  SESSION_SERVICE_TAG: v1.7
  AUTH_SERVICE_TAG: v1.7
  CART_SERVICE_TAG: v1.7
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

on:
  push:
    branches: [ develop, main ]
  pull_request:

jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: Login to DockerHub Registry
#        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#      - name: Build Docker api-server image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-server:${{ env.API_SERVER_TAG }} --target api-server .
#      - name: Push the api_server image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-server:${{ env.API_SERVER_TAG }}
#      - name: Build Docker api-db image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-db:${{ env.API_DB_TAG }} --target api-db .
#      - name: Push the api-db image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-db:${{ env.API_DB_TAG }}
#      - name: Build Docker session-service image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/session-service:${{ env.SESSION_SERVICE_TAG }} --target session-service .
#      - name: Push the session-service image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/session-service:${{ env.SESSION_SERVICE_TAG }}
#      - name: Build Docker cart-service image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/cart-service:${{ env.CART_SERVICE_TAG }} --target cart-service .
#      - name: Push the cart-service image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cart-service:${{ env.CART_SERVICE_TAG }}
#      - name: Build Docker auth-service image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ env.AUTH_SERVICE_TAG }} --target auth-service .
#      - name: Push the auth-service image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ env.AUTH_SERVICE_TAG }}
#      - name: Upload dependencies
#        uses: actions/upload-artifact@v2
#        with:
#          name: Backend
#          path: |
#            ./docker-compose.yml
#            ./log
#            ./scripts
#            ./uploads
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Create branch name variable
        if: github.event_name == 'pull_request'
        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_HEAD_REF})"
      - name: Get branch name
        run: echo 'The branch name is' $BRANCH_NAME
#
#      - uses: actions/checkout@v1
#      - name: Get full coverage
#        run: go test -coverprofile=coverage1.out -coverpkg=./... -cover ./...
#      - name: Ignore some directories
#        run: cat coverage1.out | grep -v mock | grep -v proto | grep -v cmd | grep -v middleware | grep -v models > cover.out
#
#      - name: Create badge
#        run: |
#          echo $BRANCH_NAME
#          total=`go tool cover -func=cover.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
#          if (( $(echo "$total <= 40" | bc -l) )) ; then
#            COLOR=red
#          elif (( $(echo "$total > 60" | bc -l) )); then
#            COLOR=green
#          else
#            COLOR=orange
#          fi
#          mkdir badges
#          cd badges
#          mkdir $BRANCH_NAME
#          cd $BRANCH_NAME
#          curl "https://img.shields.io/badge/coverage-$total%25-$COLOR" > tests.svg
#      - name: Upload badge to hotbox
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --endpoint-url https://hb.bizmrg.com --acl public-read --follow-symlinks
#        env:
#          AWS_S3_BUCKET: ${{ secrets.DUCKLUCK_COVERAGE_BUCKET }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.DUCKLUCK_COVERAGE_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.DUCKLUCK_COVERAGE_SECRET }}
#          SOURCE_DIR: 'badges'
#
#      - id: get-comment-body
#        run: |
#          body=$(go tool cover -func cover.out)
#          body="${body//'%'/'%25'}"
#          body="${body//$'\n'/'%0A'}"
#          body="${body//$'\r'/'%0D'}"
#          echo ::set-output name=body::$body

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.number }}
          body:
#            ${{ steps.get-comment-body.outputs.body }}
            [![Coverage](https://duckluck-cov.hb.bizmrg.com/${{ env.BRANCH_NAME }}/tests.svg)](https://github.com/go-park-mail-ru/2021_1_DuckLuck/actions/workflows/docker-deploy.yml)
          reactions: eyes


#      - name: Upload dependencies
#        uses: actions/upload-artifact@v2
#        with:
#          name: Backend
#          path: |
#            ./docker-compose.yml
#            ./log
#            ./scripts
#            ./uploads
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Download dependencies
#        uses: actions/download-artifact@v1
#        with:
#          name: Backend
#      - name: Transfer dependencies to api_server
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          source: "Backend"
#          target: "/home/ubuntu/duckluckmarket"
#
#      - name: pull api-server docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-server:${{ env.API_SERVER_TAG  }}
#      - name: pull api-db docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-db:${{ env.API_DB_TAG }}
#      - name: pull cart-service docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cart-service:${{ env.CART_SERVICE_TAG }}
#      - name: pull auth-service docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ env.AUTH_SERVICE_TAG }}
#      - name: pull session-service docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/session-service:${{ env.SESSION_SERVICE_TAG }}
#      - name: deploy docker image
#        uses: appleboy/ssh-action@master
#        with:
#          envs: GITHUB_SHA
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: |
#            cd /home/ubuntu/duckluckmarket/Backend
#            echo API_DB_TAG=${{ env.API_DB_TAG }} > .env
#            echo API_SERVER_TAG=${{ env.API_SERVER_TAG }} >> .env
#            echo SESSION_SERVICE_TAG=${{ env.SESSION_SERVICE_TAG }} >> .env
#            echo AUTH_SERVICE_TAG=${{ env.AUTH_SERVICE_TAG }} >> .env
#            echo CART_SERVICE_TAG=${{ env.CART_SERVICE_TAG }} >> .env
#            sudo docker volume create --name=grafana-storage
#            sudo docker-compose down
#            sudo docker-compose up -d