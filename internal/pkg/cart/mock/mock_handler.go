// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_DuckLuck/internal/pkg/cart (interfaces: Handler)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddProductInCart mocks base method.
func (m *MockHandler) AddProductInCart(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddProductInCart", arg0, arg1)
}

// AddProductInCart indicates an expected call of AddProductInCart.
func (mr *MockHandlerMockRecorder) AddProductInCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductInCart", reflect.TypeOf((*MockHandler)(nil).AddProductInCart), arg0, arg1)
}

// ChangeProductInCart mocks base method.
func (m *MockHandler) ChangeProductInCart(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeProductInCart", arg0, arg1)
}

// ChangeProductInCart indicates an expected call of ChangeProductInCart.
func (mr *MockHandlerMockRecorder) ChangeProductInCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProductInCart", reflect.TypeOf((*MockHandler)(nil).ChangeProductInCart), arg0, arg1)
}

// DeleteProductInCart mocks base method.
func (m *MockHandler) DeleteProductInCart(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProductInCart", arg0, arg1)
}

// DeleteProductInCart indicates an expected call of DeleteProductInCart.
func (mr *MockHandlerMockRecorder) DeleteProductInCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductInCart", reflect.TypeOf((*MockHandler)(nil).DeleteProductInCart), arg0, arg1)
}

// DeleteProductsFromCart mocks base method.
func (m *MockHandler) DeleteProductsFromCart(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProductsFromCart", arg0, arg1)
}

// DeleteProductsFromCart indicates an expected call of DeleteProductsFromCart.
func (mr *MockHandlerMockRecorder) DeleteProductsFromCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductsFromCart", reflect.TypeOf((*MockHandler)(nil).DeleteProductsFromCart), arg0, arg1)
}

// GetProductsFromCart mocks base method.
func (m *MockHandler) GetProductsFromCart(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProductsFromCart", arg0, arg1)
}

// GetProductsFromCart indicates an expected call of GetProductsFromCart.
func (mr *MockHandlerMockRecorder) GetProductsFromCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsFromCart", reflect.TypeOf((*MockHandler)(nil).GetProductsFromCart), arg0, arg1)
}
